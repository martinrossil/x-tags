{
  	"parser": "@typescript-eslint/parser",
  	"plugins": ["@typescript-eslint"],
	"extends": [
		"xo",
		"xo-typescript"
	],
	"ignorePatterns": ["**/*.js", "node_modules"],
	"rules": {
		"capitalized-comments": "off",
		"@typescript-eslint/naming-convention": "off",    // so we can use first_last
		"@typescript-eslint/object-curly-spacing": "off",
		"@typescript-eslint/consistent-type-imports": "off",        // so we don't have to do import type { SomeType }
		"no-unused-expressions": "off",
    	"@typescript-eslint/no-unused-expressions": "off"
	},
	"globals": {
		"describe": "readonly", // describe and it is defined as globals by mocha
		"it": "readonly"
	}
	/* 
	"rules": {
		"object-curly-spacing": "off",
		
		"@typescript-eslint/ban-types": "off",
		"@typescript-eslint/no-confusing-void-expression": "off",
		"@typescript-eslint/parameter-properties": "off",
		
		"@typescript-eslint/restrict-plus-operands": "off",         // so we can do 'page=' + 1
		"@typescript-eslint/no-unsafe-argument": "warn",
		"@typescript-eslint/no-unsafe-assignment": "warn",
		"@typescript-eslint/no-unnecessary-type-assertion": "warn",
		
		
		"@typescript-eslint/consistent-type-definitions": "off",    // we need interfaces that classes implements
		"@typescript-eslint/member-ordering": "off",                // I want private _ members placed together with get / set
		"@typescript-eslint/no-unsafe-return": "warn",
		"dot-notation": "off",
		"@typescript-eslint/dot-notation": "off",
		"@typescript-eslint/no-extraneous-class": "off",            // for Singleton classes
		"no-constructor-return": "off",                             // So we can return a Proxy
		"max-depth": "off",
		"no-new": "off",
		"quote-props": "off"											// So we can quote state machines for the closure compiler
  	} */
}